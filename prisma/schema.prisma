generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EmailStatus {
  draft
  scheduled
  sent
  failed
}

enum AiModel {
  sonar
  sonar_pro @map("sonar-pro")
}

enum UserRole {
  user
  admin
}

model User {
  id        Int      @id @default(autoincrement())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  role      UserRole @default(user)

  stripeCustomerId         String?    @unique
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt
  emails                   Email[]
  campaigns                Campaign[]
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String
  company   String?
  website   String?
  state     String?
  country   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contactListId Int?
  contactList   ContactList? @relation(fields: [contactListId], references: [id], onDelete: Cascade)
  campaigns     Campaign[]
  Email         Email[]

  @@unique([email, contactListId])
  @@index([contactListId])
}

// needs database trigger whenever a contact is added, update this table accordingly
model ContactList {
  id         Int       @id @default(autoincrement())
  category   String    @unique
  identifier String    @unique
  count      Int
  contacts   Contact[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([category])
}

model Email {
  id         Int         @id @default(autoincrement())
  subject    String
  message    String      @db.Text
  status     EmailStatus @default(draft)
  sentAt     DateTime?
  userId     String
  user       User        @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  campaignId Int
  campaign   Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contactId  Int
  contact    Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([campaignId])
}

model Campaign {
  id          Int       @id @default(autoincrement())
  name        String
  userId      String
  user        User      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  contacts    Contact[]
  subject     String?
  message     String?   @db.Text
  aiModel     AiModel?
  testMessage String?   @db.Text
  testSubject String?
  emails      Email[]
  senderEmail String?
  senderName  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}
