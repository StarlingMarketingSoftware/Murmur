generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

enum EmailStatus {
  draft
  scheduled
  sent
  failed
}

enum EmailVerificationStatus {
  valid
  invalid
  catch_all
  spamtrap
  abuse
  do_not_mail
  unknown
}

enum HybridBlock {
  introduction
  research
  action
  text
}

enum ContactVerificationRequestStatus {
  processing
  completed
  failed
}

enum AiModel {
  sonar
  sonar_pro @map("sonar-pro")
}

enum UserRole {
  user
  admin
}

enum Status {
  active
  deleted
  archived
}

enum DraftingMode {
  ai
  hybrid
  handwritten
}

enum DraftingTone {
  normal
  explanatory
  formal
  concise
  casual
}

model User {
  id                  Int      @id @default(autoincrement())
  clerkId             String   @unique
  email               String   @unique
  murmurEmail         String?  @unique
  firstName           String?
  lastName            String?
  role                UserRole @default(user)
  aiDraftCredits      Int      @default(5)
  aiTestCredits       Int      @default(2)
  draftCredits        Float    @default(0)
  sendingCredits      Float    @default(0)
  verificationCredits Float    @default(0)
  customDomain        String?

  stripeCustomerId         String?           @unique
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  stripePriceId            String?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  emails                   Email[]
  campaigns                Campaign[]
  signatures               Signature[]
  identities               Identity[]
  contactLists             ContactList[]
  userContactLists         UserContactList[]
  contacts                 Contact[]
  lastCreditUpdate         DateTime?
}

model ContactList {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  title     String     @default("Untitled Contact List")
  count     Int?       @default(0)
  contacts  Contact[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String?
  user      User?      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  campaigns Campaign[]

  @@index([userId])
}

model UserContactList {
  id   Int    @id @default(autoincrement())
  name String

  userId    String
  user      User       @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  contacts  Contact[]
  campaigns Campaign[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Contact {
  id                 Int      @id @default(autoincrement())
  apolloPersonId     String?  @unique
  firstName          String?
  lastName           String?
  email              String
  company            String?
  city               String?
  state              String?
  country            String?
  address            String?
  phone              String?
  website            String?
  title              String?
  headline           String?
  linkedInUrl        String?
  photoUrl           String?
  metadata           String?
  companyLinkedInUrl String?
  companyFoundedYear String?
  companyType        String?
  companyTechStack   String[]
  companyPostalCode  String?
  companyKeywords    String[]
  companyIndustry    String?
  latitude           Float?
  longitude          Float?

  isPrivate            Boolean   @default(false)
  hasVectorEmbedding   Boolean   @default(false)
  userContactListCount Int       @default(0)
  manualDeselections   Int       @default(0)
  lastResearchedDate   DateTime?

  emailValidationStatus    EmailVerificationStatus @default(unknown)
  emailValidationSubStatus String?
  emailValidatedAt         DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId           String?
  user             User?             @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  contactListId    Int?
  contactList      ContactList?      @relation(fields: [contactListId], references: [id], onDelete: Cascade)
  userContactLists UserContactList[]
  campaigns        Campaign[]
  Email            Email[]

  @@unique([email, contactListId])
  @@index([contactListId])
  @@index([userId])
}

model Email {
  id         Int         @id @default(autoincrement())
  subject    String
  message    String      @db.Text
  status     EmailStatus @default(draft)
  sentAt     DateTime?
  userId     String
  user       User        @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  campaignId Int
  campaign   Campaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contactId  Int
  contact    Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([campaignId])
}

model Campaign {
  id                    Int               @id @default(autoincrement())
  name                  String
  status                Status            @default(active)
  userId                String
  user                  User              @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  contacts              Contact[]
  draftingMode          DraftingMode      @default(ai)
  draftingTone          DraftingTone      @default(normal)
  paragraphs            Int?              @default(0)
  subject               String?
  isAiSubject           Boolean           @default(true)
  fullAiPrompt          String?           @map("message") @db.Text
  hybridPrompt          String?           @db.Text
  hybridAvailableBlocks HybridBlock[]     @default([introduction, research, action, text])
  hybridBlockPrompts    Json?
  handwrittenPrompt     String?           @db.Text
  font                  String            @default("Arial")
  testMessage           String?           @db.Text
  testSubject           String?
  emails                Email[]
  senderEmail           String?
  senderName            String?
  signatureId           Int?
  signature             Signature?        @relation(fields: [signatureId], references: [id])
  identityId            Int?
  identity              Identity?         @relation(fields: [identityId], references: [id])
  contactLists          ContactList[]
  userContactLists      UserContactList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Identity {
  id      Int     @id @default(autoincrement())
  name    String
  website String?
  email   String

  userId    String
  user      User       @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  campaigns Campaign[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
}

model Signature {
  id        Int        @id @default(autoincrement())
  name      String
  content   String     @default("")
  userId    String
  user      User       @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  campaigns Campaign[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model EmailVerificationCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([email, code])
  @@index([email])
  @@index([expiresAt])
}

model ContactVerificationRequest {
  id                        Int                              @id @default(autoincrement())
  fileId                    String                           @unique
  estimatedTimeOfCompletion DateTime
  status                    ContactVerificationRequestStatus @default(processing)
  query                     String?
  limit                     Int?
  onlyUnverified            Boolean?
  notVerifiedSince          DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApolloQuery {
  id                  Int        @id @default(autoincrement())
  query               String
  apolloQuery         Json       @db.JsonB
  maxPage             Int
  pageLastFetched     Int
  pageFetchTimeStamps DateTime[]
}
